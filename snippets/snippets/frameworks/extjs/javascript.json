{
  "Ext.js 3.4 Grouping Store": {
    "prefix": "ext-store-group",
    "body": [
      "const ${1:storeName} = new Ext.data.GroupingStore({",
      "  proxy: new Ext.data.HttpProxy({",
      "    url: baseUrl + \"${2:urlString}\",",
      "    method: \"GET\",",
      "  }),",
      "  groupField: \"${3:groupBy}\",",
      "  paramNames: {",
      "    start: \"offset\",",
      "    limit: \"per_page\",",
      "  },",
      "  reader: new Ext.data.JsonReader(",
      "    {",
      "      root: \"results\",",
      "      totalProperty: \"total\",",
      "      id: \"id\",",
      "    },",
      "    [",
      "      { name: \"id\", type: \"int\", mapping: \"id\" },",
      "      { name: \"name\", type: \"string\", mapping: \"name\" },",
      "      { name: \"created_by\", type: \"string\", mapping: \"created_by\" },",
      "      {",
      "        name: \"created_at\",",
      "        type: \"date\",",
      "        dateFormat: \"Y-m-d H:i:s\",",
      "        mapping: \"created_at\",",
      "      },",
      "      { name: \"updated_by\", type: \"string\", mapping: \"updated_by\" },",
      "      {",
      "        name: \"updated_at\",",
      "        type: \"date\",",
      "        dateFormat: \"Y-m-d H:i:s\",",
      "        mapping: \"updated_at\",",
      "      },",
      "      {",
      "        name: \"deleted_at\",",
      "        type: \"date\",",
      "        dateFormat: \"Y-m-d H:i:s\",",
      "        mapping: \"deleted_at\",",
      "      },",
      "    ]",
      "  ),",
      "  listeners: {",
      "  },",
      "});",
      ""
    ],
    "description": "Ext.js 3.4 Grouping Store"
  },
  "Ext.js 3.4 General Store": {
    "prefix": "ext-store",
    "body": [
      "const ${1:storeName} = new Ext.data.Store({",
      "  proxy: new Ext.data.HttpProxy({",
      "    url: baseUrl + \"${2:urlString}\",",
      "    method: \"GET\",",
      "  }),",
      "  paramNames: {",
      "    start: \"offset\",",
      "    limit: \"per_page\",",
      "  },",
      "  reader: new Ext.data.JsonReader(",
      "    {",
      "      root: \"results\",",
      "      totalProperty: \"total\",",
      "      idProperty: \"id\",",
      "    },",
      "    [",
      "      { name: \"id\", type: \"int\", mapping: \"id\" },",
      "      { name: \"name\", type: \"string\", mapping: \"name\" },",
      "      { name: \"created_by\", type: \"string\", mapping: \"created_by\" },",
      "      {",
      "        name: \"created_at\",",
      "        type: \"date\",",
      "        dateFormat: \"Y-m-d H:i:s\",",
      "        mapping: \"created_at\",",
      "      },",
      "      { name: \"updated_by\", type: \"string\", mapping: \"updated_by\" },",
      "      {",
      "        name: \"updated_at\",",
      "        type: \"date\",",
      "        dateFormat: \"Y-m-d H:i:s\",",
      "        mapping: \"updated_at\",",
      "      },",
      "      {",
      "        name: \"deleted_at\",",
      "        type: \"date\",",
      "        dateFormat: \"Y-m-d H:i:s\",",
      "        mapping: \"deleted_at\",",
      "      },",
      "    ]",
      "  ),",
      "  listeners: {},",
      "});",
      "",
      "",
      "",
      ""
    ],
    "description": "Ext.js 3.4 General Store"
  },
  "Ext.js 3.4 SuperBox Select": {
    "prefix": "ext-superbox",
    "body": [
      "const ${1:fieldName} = new Ext.ux.form.SuperBoxSelect({",
      "  name: \"${2:name}\",",
      "  fieldLabel: \"${3:label}\",",
      "  anchor: \"100%\",",
      "  style: \"border-radius: 4px\",",
      "  supressClearValueRemoveEvents: false,",
      "  store: ${4:store},",
      "  mode: \"local\",",
      "  allowBlank: true,",
      "  triggerAction: \"all\",",
      "  displayField: \"${5:displayField}\",",
      "  valueField: \"${6:id}\",",
      "  navigateItemsWithTab: false,",
      "  nHeight: 70,",
      "  listeners: {},",
      "});",
      "",
      "",
      "",
      ""
    ],
    "description": "Ext.js 3.4 SuperBox Select"
  },
  "Extjs superbox": {
    "prefix": "ext-super-box",
    "body": [
      "const ${1:prefix}Field = new Ext.ux.form.SuperBoxSelect({",
      "  id: \"${2:sub_prefix}_field\",",
      "  name: \"${2:sub_prefix}\",",
      "  fieldLabel: \"${3:Title} ${4:<font color=red>*</font>}\",",
      "  anchor: \"98%\",",
      "  store: ${5:datastore},",
      "  mode: \"remote\",",
      "  pageSize: pageS,",
      "  tpl: new Ext.XTemplate(",
      "    '<tpl for=\".\">',",
      "    '<div class=\"search-item\">',",
      "    \"<span>{name}<br/></span>\",",
      "    \"</div>\",",
      "    \"</tpl>\"",
      "  ),",
      "  triggerAction: \"all\",",
      "  itemSelector: \"div.search-item\",",
      "  displayField: \"name\",",
      "  valueField: \"id\",",
      "  navigateItemsWithTab: false,",
      "  nHeight: 66,",
      "  allowBlank: false",
      "});",
      ""
    ],
    "description": "Extjs superbox"
  },
  "Extjs textfield": {
    "prefix": "ext-textfield",
    "body": [
      "const ${1:prefix}Field = new Ext.form.TextField({",
      "  name: \"${2:subprefix}\",",
      "  readOnly: true,",
      "  fieldLabel: \"${3:Title} ${4:<font color=red>*</font>}\",",
      "  cls: \"form-textfield\",",
      "  anchor: \"98%\",",
      "  allowBlank: true,",
      "});",
      ""
    ],
    "description": "Extjs textfield"
  },
  "Extjs text area": {
    "prefix": "ext-textarea",
    "body": [
      "const ${1:prefix}Field = new Ext.form.TextArea({",
      "  allowBlank: true,",
      "  name: \"${2:subprefix}\",",
      "  fieldLabel: \"${3:Title}\",",
      "  anchor: \"98%\",",
      "  height: 50,",
      "});",
      ""
    ],
    "description": "Extjs text area"
  },
  "Extjs combobox with array store": {
    "prefix": "ext-combobox-array",
    "body": [
      "const ${1:prefix}Field = new Ext.form.ComboBox({",
      "  anchor: \"100%\",",
      "  triggerAction: \"all\",",
      "  name: \"${2:subprefix}\",",
      "  fieldLabel: \"${3:Title} ${4:<font color=red>*</font>}\",",
      "  mode: \"local\",",
      "  store: new Ext.data.ArrayStore({",
      "    fields: [\"value\", \"display\"],",
      "    data: [",
      "      [\"a\", \"A\"],",
      "      [\"b\", \"B\"],",
      "    ],",
      "  }),",
      "  displayField: \"display\",",
      "  valueField: \"value\",",
      "  pageSize: pageS,",
      "  allowBlank: true,",
      "  listeners: {",
      "  },",
      "});",
      ""
    ],
    "description": "Extjs combobox with array store"
  },
  "Extjs combobox with general store": {
    "prefix": "ext-combobox-store",
    "body": [
      "const ${1:prefix}Field = new Ext.form.ComboBox({",
      "  anchor: \"100%\",",
      "  triggerAction: \"all\",",
      "  name: \"${2:subprefix}\",",
      "  fieldLabel: \"${3:Title} ${4:<font color=red>*</font>}\",",
      "  mode: \"local\",",
      "  store: ${5:datastore},",
      "  displayField: \"name\",",
      "  valueField: \"id\",",
      "  pageSize: pageS,",
      "  allowBlank: true,",
      "  listeners: {",
      "  },",
      "});",
      ""
    ],
    "description": "Extjs combobox with general store"
  },
  "Extjs start date": {
    "prefix": "ext-datefield-start",
    "body": [
      "const ${1:prefix}StartDateField = new Ext.form.DateField({",
      "  name: \"start_date\",",
      "  format: \"d-m-Y\",",
      "  anchor: \"100%\",",
      "  fieldLabel: \"Start Date <font color=red>*</font>\",",
      "  allowBlank: false,",
      "  flex: 1,",
      "  value: today,",
      "  minValue: today,",
      "  listeners: {",
      "    select: function(combo) {",
      "      const limit = combo.getValue();",
      "      ${1:prefix}EndDateField.setMinValue(limit);",
      "      ${1:prefix}EndDateField.validate();",
      "    },",
      "  },",
      "});",
      ""
    ],
    "description": "Extjs start date"
  },
  "Extjs end date": {
    "prefix": "ext-datefield-end",
    "body": [
      "const ${1:prefix}EndDateField = new Ext.form.DateField({",
      "  name: \"end_date\",",
      "  format: \"d-m-Y\",",
      "  anchor: \"100%\",",
      "  fieldLabel: \"End Date <font color=red>*</font>\",",
      "  allowBlank: false,",
      "  flex: 1,",
      "  value: END_DATE_DEFAULT,",
      "  minValue: today,",
      "  listeners: {",
      "    select: function(combo) {",
      "      const limit = combo.getValue();",
      "      if (limit) {",
      "        combo.setMinValue(limit);",
      "        combo.validate();",
      "      }",
      "      ${1:prefix}StartDateField.setMaxValue(limit);",
      "      ${1:prefix}StartDateField.validate();",
      "    },",
      "  },",
      "});"
    ],
    "description": "Extjs end date"
  },
  "Extjs numberfield": {
    "prefix": "ext-numericfield",
    "body": [
      "const ${1:prefix}Field = new Ext.ux.NumericField({",
      "  name: \"${2:subprefix}\",",
      "  fieldLabel: \"${3:Title} ${4:<font color=red>*</font>}\",",
      "  useThousandSeparator: true,",
      "  decimalPrecision: 2,",
      "  allowDecimals: false,",
      "  alwaysDisplayDecimals: false,",
      "  allowBlank: false,",
      "  currencySymbol: \"\",",
      "  thousandSeparator: \".\",",
      "  decimalSeparator: \",\",",
      "  minValue: 1,",
      "  selectOnFocus: true,",
      "  maskRe: /([0-9]+)$/,",
      "  allowNegative: false,",
      "  cls: \"form-textfield\",",
      "  value: 1,",
      "  anchor: \"100%\",",
      "  listeners: {},",
      "});",
      ""
    ],
    "description": "Extjs numberfield"
  },
  "Extjs radiofield": {
    "prefix": "ext-radiofield",
    "body": [
      "const ${1:prefix}Field = new Ext.form.RadioGroup({",
      "  name: \"${2:subprefix}\",",
      "  fieldLabel: \"${3:Title}\",",
      "  anchor: \"75%\",",
      "  items: [",
      "    {",
      "      boxLabel: \"Yes\",",
      "      inputValue: \"1\",",
      "      id: \"active-1\",",
      "      name: \"active\",",
      "      checked: true,",
      "    },",
      "    {",
      "      boxLabel: \"No\",",
      "      inputValue: \"0\",",
      "      id: \"active-0\",",
      "      name: \"active\",",
      "    },",
      "  ],",
      "});",
      ""
    ],
    "description": "Extjs radiofield"
  },
  "Extjs fieldset multi columns": {
    "prefix": "ext-fieldset-columns",
    "body": [
      "const ${1:prefix}Fieldset = new Ext.form.FieldSet({",
      "  style: \"vertical-align:middle;border-radius:4px;\",",
      "  layout: \"form\",",
      "  border: false,",
      "  frame: false,",
      "  cls: \"bordered\",",
      "  items: [",
      "    {",
      "      layout: \"column\",",
      "      frame: false,",
      "      title: false,",
      "      border: false,",
      "      items: [",
      "        {",
      "          layout: \"form\",",
      "          bodyCssClass: \"line-sparator-field-right\",",
      "          columnWidth: 1 / 2,",
      "          border: false,",
      "          items: [],",
      "        },",
      "        {",
      "          layout: \"form\",",
      "          bodyStyle: \"padding-left: 10px;\",",
      "          columnWidth: 1 / 2,",
      "          items: [],",
      "        },",
      "      ],",
      "    },",
      "  ],",
      "});",
      ""
    ],
    "description": "Extjs fieldset multi columns"
  },
  "Extjs fieldset": {
    "prefix": "ext-fieldset",
    "body": [
      "const ${1:prefix}Fieldset = new Ext.form.FieldSet({",
      "  style: \"vertical-align:middle;border-radius:4px;\",",
      "  layout: \"form\",",
      "  border: false,",
      "  frame: false,",
      "  cls: \"bordered\",",
      "  items: [",
      "    {",
      "      layout: \"form\",",
      "      border: false,",
      "      items: [],",
      "    },",
      "  ],",
      "});",
      ""
    ],
    "description": "Extjs fieldset"
  },
  "Extjs button save": {
    "prefix": "ext-btn-save",
    "body": [
      "const ${1:prefix}BtnSave = new BtnDarkBlue({",
      "  text: BTN_SAVE,",
      "  iconCls: \"icon-save\",",
      "  handler: ${2:handler},",
      "});",
      ""
    ],
    "description": "Extjs button save"
  },
  "Extjs panel dark": {
    "prefix": "ext-panel-dark",
    "body": [
      "const ${1:prefix}Panel = new Ext.Panel({",
      "  title: \"${2:subprefix}\",",
      "  region: \"center\", // this is what makes this panel into a region within the containing layout",
      "  layout: \"column\",",
      "  hideCollapseTool: true,",
      "  frame: true,",
      "  activeItem: 0,",
      "  autoScroll: true,",
      "  border: false,",
      "  hidden: false,",
      "  cls: \"table-bordered-dark\",",
      "  style: \"margin-bottom: 10px\",",
      "  bodyCssClass: \"bordered\",",
      "  items: [",
      "    {",
      "      layout: \"form\",",
      "      columnWidth: 1,",
      "      border: false,",
      "      items: [],",
      "    },",
      "  ],",
      "});",
      ""
    ],
    "description": "Extjs panel dark"
  },
  "Extjs form panel": {
    "prefix": "ext-formpanel",
    "body": [
      "const ${1:prefix}Form = new Ext.FormPanel({",
      "  layout: \"form\",",
      "  id: \"${2:subprefix}\",",
      "  title: \"${3:Title} \" + TITLE_FORM,",
      "  cls: \"table-bordered\",",
      "  frame: true,",
      "  border: false,",
      "  autoHeight: true,",
      "  collapsed: true,",
      "  hideCollapseTool: true,",
      "  items: [],",
      "  buttons: [",
      "    new BtnOutlineRed({",
      "      text: BTN_CANCEL,",
      "      iconCls: \"icon-close\",",
      "      handler: function() {",
      "        ${1:prefix}ResetForm();",
      "        ${1:prefix}Form.toggleCollapse();",
      "        ${1:prefix}ListEditorGrid.toggleCollapse();",
      "      },",
      "    }),",
      "    ${1:prefix}BtnSave,",
      "  ],",
      "});",
      ""
    ],
    "description": "Extjs form panel"
  },
  "Extjs btn cancel": {
    "prefix": "ext-btn-cancel",
    "body": [
      "const ${1:prefix}BtnCancel = new BtnOutlineRed({",
      "  text: BTN_CANCEL,",
      "  iconCls: \"icon-close\",",
      "  handler: function() {",
      "    ${1:prefix}ResetForm();",
      "    ${1:prefix}Form.toggleCollapse();",
      "    ${1:prefix}ListEditorGrid.toggleCollapse();",
      "  },",
      "});",
      "",
      ""
    ],
    "description": "Extjs btn cancel"
  },
  "Extjs column model": {
    "prefix": "ext-columnmodel",
    "body": [
      "const ${1:prefix}ColumnModel = new Ext.grid.ColumnModel([",
      "  {",
      "    header: \"Action\",",
      "    xtype: \"actioncolumn\",",
      "    width: 15,",
      "    align: \"center\",",
      "    items: [",
      "      {",
      "        getClass: function(v, meta, rec) {",
      "          this.items[0].tooltip = \"Edit\";",
      "          return \"x-icon-edit\";",
      "        },",
      "        handler: function(grid, rowIndex, colIndex) {",
      "          grid.getSelectionModel().selectRow(rowIndex);",
      "          ${1:prefix}ConfirmUpdate();",
      "        },",
      "      },",
      "      {",
      "        getClass: function(v, meta, rec) {",
      "          this.items[1].tooltip = \"Delete\";",
      "          return \"x-icon-delete\";",
      "        },",
      "        handler: function(grid, rowIndex, colIndex) {",
      "          grid.getSelectionModel().selectRow(rowIndex);",
      "          ${1:prefix}ConfirmDelete();",
      "        },",
      "      },",
      "    ],",
      "  },",
      "  {",
      "    header: \"Code\",",
      "    dataIndex: \"code\",",
      "    width: 50,",
      "    sortable: true,",
      "    hidden: false,",
      "  },",
      "  {",
      "    header: \"Name\",",
      "    dataIndex: \"name\",",
      "    width: 30,",
      "    sortable: true,",
      "    hidden: false,",
      "  },",
      "  {",
      "    header: \"Description Eng\",",
      "    dataIndex: \"description_en\",",
      "    width: 50,",
      "    sortable: true,",
      "    hidden: false,",
      "  },",
      "  {",
      "    header: \"Active\",",
      "    dataIndex: \"active\",",
      "    width: 10,",
      "    sortable: true,",
      "    hidden: false,",
      "    align: \"center\",",
      "    renderer: function(v) {",
      "      return v ? \"Y\" : \"N\";",
      "    },",
      "  },",
      "]);",
      "",
      "",
      ""
    ],
    "description": "Extjs column model"
  },
  "Extjs button grid primary": {
    "prefix": "ext-btn-grid",
    "body": [
      "const ${1:prefix}GridBtnAdd = new BtnOutlineDarkBlue({",
      "  text: BTN_ADD_TITLE,",
      "  tooltip: BTN_ADD_TOOLTIP,",
      "  iconCls: \"icon-adds\",",
      "  handler: ${2:handler},",
      "});",
      ""
    ],
    "description": "Extjs button grid primary"
  },
  "Extjs search grid": {
    "prefix": "ext-search-grid",
    "body": [
      "const ${1:prefix}Search = new Ext.app.SearchField({",
      "  cls: \"search-field\",",
      "  store: ${2:datastore},",
      "  listeners: {",
      "    specialkey: function(f, e) {",
      "      if (e.getKey() == e.ENTER) {",
      "        ${2:datastore}.baseParams = {",
      "          offset: 0,",
      "          per_page: pageS,",
      "        };",
      "      }",
      "    },",
      "    render: function() {",
      "      Ext.get(this.id).set({ qtitle: BTN_SIMPLE_SEARCH_TOOLTIP });",
      "    },",
      "  },",
      "  width: 160,",
      "  emptyText: \"Name / Code\",",
      "});",
      ""
    ],
    "description": "Extjs search grid"
  },
  "Extjs grid": {
    "prefix": "ext-grid",
    "body": [
      "const ${1:prefixName}Grid = new Ext.grid.EditorGridPanel({",
      "  title: \"${3:title} \" + TITLE_LIST,",
      "  loadMask: WAIT_MESSAGE,",
      "  store: ${2:datastore},",
      "  cm: ${3:columnmodel},",
      "  anchor: \"100%\",",
      "  enableColLock: false,",
      "  frame: true,",
      "  autoHeight: true,",
      "  cls: \"table-bordered\",",
      "  border: false,",
      "  collapsed: false,",
      "  hideCollapseTool: true,",
      "  selModel: new Ext.grid.RowSelectionModel({ singleSelect: true }),",
      "  viewConfig: {",
      "    forceFit: true,",
      "  },",
      "  bbar: [",
      "    {",
      "      text: BTN_INFO_TITLE,",
      "      tooltip: BTN_INFO_TOOLTIP,",
      "      iconCls: \"icon-info\",",
      "      style: {",
      "        \"border-radius\": \"4px\",",
      "        border: \"1px solid #1c77ff\",",
      "      },",
      "      hidden: init_info,",
      "      handler: function () {",
      "        window.open(linkKnowledgebase + linkHelp);",
      "      },",
      "    },",
      "    \"->\",",
      "    \"->\",",
      "    new Ext.PagingToolbar({",
      "      pageSize: pageS,",
      "      store: ${2:datastore},",
      "      displayInfo: true,",
      "    }),",
      "  ],",
      "  tbar: [",
      "    ${4:GridBtnAdd},",
      "    \"->\",",
      "    ${5:SearchField},",
      "    new BtnOutlineDarkBlue({",
      "      text: BTN_REFRESH_TITLE,",
      "      tooltip: BTN_REFERSH_TOOLTIP,",
      "      iconCls: \"icon-refresh\",",
      "      handler: function () {",
      "        ${5:SearchField}.setValue(null);",
      "        ${5:SearchField}.onTrigger2Click();",
      "      },",
      "    }),",
      "    \" \",",
      "  ],",
      "  listeners: {",
      "    dblclick: function () {",
      "      ${1:prefixName}ConfirmUpdate();",
      "    },",
      "  },",
      "});",
      ""
    ],
    "description": "Extjs grid"
  },
  "Extjs main panel": {
    "prefix": "ext-main-panel",
    "body": [
      "const ${1:prefixName}MainPanel = new Ext.Panel({",
      "  region: \"center\",",
      "  fill: true,",
      "  bodyStyle: \"overflow-y: scroll\",",
      "  bodyBorder: false,",
      "  items: [${1:prefixName}Form, ${1:prefixName}Grid],",
      "});",
      "",
      "const ${1:prefixName}MainContent = new Ext.Panel({",
      "  style: \"width:100%;background-color:white;\",",
      "  layout: \"border\",",
      "  items: [${1:prefixName}MainPanel],",
      "});",
      "",
      "const container = Ext.getCmp(${1:prefixName}TabPanelAttachID);",
      "container.add(${1:prefixName}MainContent);",
      "container.doLayout();",
      ""
    ],
    "description": "Extjs main panel"
  }
}
