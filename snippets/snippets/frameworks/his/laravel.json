{
  "HISV2 CRUD Controller": {
    "prefix": "hisv2-crud-controller",
    "body": [
      "<?php",
      "",
      "declare(strict_types=1);",
      "",
      "namespace App\\Http\\Controllers\\v1;",
      "",
      "use App\\Enums\\DefaultMessages;",
      "use App\\Http\\Controllers\\Controller;",
      "use App\\Models\\${1:prefix};",
      "use Illuminate\\Http\\Request;",
      "use Illuminate\\Support\\Facades\\Auth;",
      "use Illuminate\\Validation\\ValidationException;",
      "",
      "class ${1:prefix}Controller extends Controller",
      "{",
      "\tprotected \\$model;",
      "",
      "\tpublic function __construct()",
      "\t{",
      "\t\t\\$this->model = new ${1:prefix}();",
      "\t}",
      "",
      "\t/**",
      "\t * Get data (single / bulk).",
      "\t *",
      "\t * @param mixed",
      "\t */",
      "\tpublic function get(Request \\$request)",
      "\t{",
      "\t\ttry {",
      "\t\t\t\\$request->validate(",
      "\t\t\t\t[",
      "\t\t\t\t\t'master' => 'boolean',",
      "\t\t\t\t]",
      "\t\t\t);",
      "\t\t\t\\$isMaster = request()->query('master', '');",
      "\t\t\tif (null !== \\$isMaster && '' !== \\$isMaster) {",
      "\t\t\t\t\\$isMaster = \\$isMaster;",
      "\t\t\t} else {",
      "\t\t\t\t\\$isMaster = false;",
      "\t\t\t}",
      "",
      "\t\t\t\\$result = \\$this->model->getData(\\$request->id, \\$isMaster);",
      "\t\t\t\\$searchFields = ['m_${5:subprefix}.name', 'm_${5:subprefix}.code'];",
      "",
      "\t\t\treturn \\$this->okApiResponse(\\$result, '', \\$searchFields);",
      "\t\t} catch (\\Throwable \\$th) {",
      "\t\t\t\\Sentry\\captureException(\\$th);",
      "\t\t\tif (config('app.debug')) {",
      "\t\t\t\tthrow \\$th;",
      "\t\t\t}",
      "",
      "\t\t\treturn \\$this->badRequestApiResponse(['message' => DefaultMessages::ACTION_FAILED]);",
      "\t\t}",
      "\t}",
      "",
      "\t/**",
      "\t * Insert data batch or single.",
      "\t */",
      "\tpublic function insert(Request \\$request)",
      "\t{",
      "\t\ttry {",
      "\t\t\t\\DB::beginTransaction();",
      "\t\t\t\\$request->validate(",
      "\t\t\t\t[",
      "\t\t\t\t\t'*.code' => 'required|string|max:10',",
      "\t\t\t\t\t'*.name' => 'required|string',",
      "\t\t\t\t\t'*.name_en' => 'required|string',",
      "\t\t\t\t\t'*.active' => 'required|boolean',",
      "\t\t\t\t]",
      "\t\t\t);",
      "",
      "\t\t\tforeach (\\$request->all() as \\$data) {",
      "\t\t\t\t\\$check = \\$this->model->checkCode(Auth::user()->plant->client_id, \\$data['code'], \\$data['name']);",
      "\t\t\t\tif (\\$check) {",
      "\t\t\t\t\treturn \\$this->badRequestApiResponse(['message' => '${thingsname} code or name you entered was already exist!']);",
      "\t\t\t\t}",
      "",
      "\t\t\t\t\\$data['version'] = '2';",
      "\t\t\t\t\\$results = \\$this->model->batchOperations([\\$data], 'insert');",
      "\t\t\t}",
      "\t\t\t\\DB::commit();",
      "",
      "\t\t\treturn \\$this->createdApiResponse(\\$results);",
      "\t\t} catch (ValidationException \\$e) {",
      "\t\t\t\\DB::commit();",
      "",
      "\t\t\treturn \\$this->forbiddenApiResponse(\\$e->errors(), \\$e->getMessage());",
      "\t\t} catch (\\Throwable \\$th) {",
      "\t\t\t\\Sentry\\captureException(\\$th);",
      "\t\t\tif (config('app.debug')) {",
      "\t\t\t\tthrow \\$th;",
      "\t\t\t}",
      "\t\t\t\\DB::commit();",
      "",
      "\t\t\treturn \\$this->badRequestApiResponse(['message' => DefaultMessages::ACTION_FAILED]);",
      "\t\t}",
      "\t}",
      "",
      "\t/**",
      "\t * Update data batch or single.",
      "\t */",
      "\tpublic function Update(Request \\$request)",
      "\t{",
      "\t\ttry {",
      "\t\t\t\\DB::beginTransaction();",
      "\t\t\t\\$request->validate(",
      "\t\t\t\t[",
      "\t\t\t\t\t'*.id' => 'required|integer|exists:m_${5:subprefix},id',",
      "\t\t\t\t\t'*.name' => 'required|string',",
      "\t\t\t\t\t'*.name_en' => 'required|string',",
      "\t\t\t\t\t'*.code' => 'required|string|max:10',",
      "\t\t\t\t\t'*.active' => 'required|boolean',",
      "\t\t\t\t]",
      "\t\t\t);",
      "",
      "\t\t\tforeach (\\$request->all() as \\$data) {",
      "\t\t\t\t\\$check = \\$this->model->checkCode(Auth::user()->plant->client_id, \\$data['code'], \\$data['name']);",
      "\t\t\t\tif (\\$check && \\$check->id !== (int) \\$data['id']) {",
      "\t\t\t\t\treturn \\$this->badRequestApiResponse(['message' => '${thingsname} code or name you entered was already exist!']);",
      "\t\t\t\t}",
      "",
      "\t\t\t\t\\$data['version'] = '2';",
      "\t\t\t\t\\$results = \\$this->model->batchOperations([\\$data], 'update');",
      "\t\t\t}",
      "\t\t\t\\DB::commit();",
      "",
      "\t\t\treturn \\$this->createdApiResponse(\\$results);",
      "\t\t} catch (ValidationException \\$e) {",
      "\t\t\t\\DB::commit();",
      "",
      "\t\t\treturn \\$this->forbiddenApiResponse(\\$e->errors(), \\$e->getMessage());",
      "\t\t} catch (\\Throwable \\$th) {",
      "\t\t\t\\Sentry\\captureException(\\$th);",
      "\t\t\tif (config('app.debug')) {",
      "\t\t\t\tthrow \\$th;",
      "\t\t\t}",
      "\t\t\t\\DB::commit();",
      "",
      "\t\t\treturn \\$this->badRequestApiResponse(['message' => DefaultMessages::ACTION_FAILED]);",
      "\t\t}",
      "\t}",
      "",
      "\t/**",
      "\t * Delete data.",
      "\t */",
      "\tpublic function delete(Request \\$request)",
      "\t{",
      "\t\ttry {",
      "\t\t\t// Validate request",
      "\t\t\t\\$request->validate(",
      "\t\t\t\t[",
      "\t\t\t\t\t'*.id' => 'required|integer|exists:m_${5:subprefix},id',",
      "\t\t\t\t]",
      "\t\t\t);",
      "",
      "\t\t\tforeach (\\$request->all() as \\$req) {",
      "\t\t\t\t// get Id ${1:prefix} From Request",
      "\t\t\t\t\\$id = \\$req['id'];",
      "",
      "\t\t\t\t// list Relation",
      "\t\t\t\t\\$listRelation = [",
      "\t\t\t\t\t'${3:relationName}',",
      "\t\t\t\t];",
      "",
      "\t\t\t\t// find whole data with relation",
      "\t\t\t\t\\$${5:subprefix}Model = ${1:prefix}::with(\\$listRelation)",
      "\t\t\t\t\t->where('id', \\$id)",
      "\t\t\t\t\t->first()",
      "\t\t\t\t;",
      "",
      "\t\t\t\t// validate Foreign key",
      "\t\t\t\tforeach (\\$listRelation as \\$relation) {",
      "\t\t\t\t\tif (null !== \\$${5:subprefix}Model->{\\$relation}) {",
      "\t\t\t\t\t\tif (\\$${5:subprefix}Model->{\\$relation}->count() > 0) {",
      "\t\t\t\t\t\t\treturn \\$this->badRequestApiResponse(['message' => 'Data cannot be deleted because has been used on transaction']);",
      "\t\t\t\t\t\t}",
      "\t\t\t\t\t}",
      "\t\t\t\t}",
      "\t\t\t}",
      "",
      "\t\t\t\\$results = \\$this->model->batchOperations(\\$request->all(), 'delete');",
      "",
      "\t\t\treturn \\$this->okApiResponse(\\$results);",
      "\t\t} catch (\\Throwable \\$th) {",
      "\t\t\t\\Sentry\\captureException(\\$th);",
      "\t\t\tif (config('app.debug')) {",
      "\t\t\t\tthrow \\$th;",
      "\t\t\t}",
      "",
      "\t\t\treturn \\$this->badRequestApiResponse(['message' => DefaultMessages::ACTION_FAILED]);",
      "\t\t}",
      "\t}",
      "}",
      ""
    ],
    "description": "Create Hisv2 Crud Controller"
  }
}
